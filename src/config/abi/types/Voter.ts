/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VoterInterface extends utils.Interface {
  functions: {
    "_ve()": FunctionFragment;
    "attachTokenToGauge(address)": FunctionFragment;
    "base()": FunctionFragment;
    "bribes(address)": FunctionFragment;
    "claimBribes(address[],address[][])": FunctionFragment;
    "claimRewards(address[],address[][])": FunctionFragment;
    "claimable(address)": FunctionFragment;
    "depositeds(address,address[])": FunctionFragment;
    "detachTokenFromGauge(address)": FunctionFragment;
    "distribute(address[])": FunctionFragment;
    "distributeFees(uint256,uint256)": FunctionFragment;
    "earnedBribes(address[],address)": FunctionFragment;
    "earnedRewards(address[],address)": FunctionFragment;
    "emergencyCouncil()": FunctionFragment;
    "feeVault()": FunctionFragment;
    "gauges(address)": FunctionFragment;
    "getAttachments(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "initialize(address[],address)": FunctionFragment;
    "isAlive(address)": FunctionFragment;
    "isAttach(address,address)": FunctionFragment;
    "isBribe(address)": FunctionFragment;
    "isGauge(address)": FunctionFragment;
    "isGaugeFactory(address)": FunctionFragment;
    "isGaugeHandler(address)": FunctionFragment;
    "isVotablePool(address)": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "killGauge(address)": FunctionFragment;
    "lastVoted(address)": FunctionFragment;
    "length()": FunctionFragment;
    "migrateMinter(address)": FunctionFragment;
    "minter()": FunctionFragment;
    "noahBribe()": FunctionFragment;
    "notifyRewardAmount(uint256)": FunctionFragment;
    "poke(address)": FunctionFragment;
    "poolForBribe(address)": FunctionFragment;
    "poolForGauge(address)": FunctionFragment;
    "poolVote(address,uint256)": FunctionFragment;
    "poolWeights()": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "registerGauge(address,address,address,address)": FunctionFragment;
    "reset()": FunctionFragment;
    "reviveGauge(address)": FunctionFragment;
    "setEmergencyCouncil(address)": FunctionFragment;
    "setFeeVault(address)": FunctionFragment;
    "setGaugeFactory(address,bool)": FunctionFragment;
    "setGaugeHandler(address,bool)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setNoahBribe(address)": FunctionFragment;
    "setVotablePool(address,bool)": FunctionFragment;
    "totalWeight()": FunctionFragment;
    "undistributed()": FunctionFragment;
    "updateAll()": FunctionFragment;
    "updateFor(address[])": FunctionFragment;
    "updateForRange(uint256,uint256)": FunctionFragment;
    "updateGauge(address)": FunctionFragment;
    "update_period()": FunctionFragment;
    "usedWeights(address)": FunctionFragment;
    "userVotes(address)": FunctionFragment;
    "vote(address[],uint256[])": FunctionFragment;
    "weights(address)": FunctionFragment;
    "whitelist(address,bool)": FunctionFragment;
    "withdrawBribe(address[],address[][])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_ve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "attachTokenToGauge",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "base", values?: undefined): string;
  encodeFunctionData(functionFragment: "bribes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimBribes",
    values: [string[], string[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [string[], string[][]]
  ): string;
  encodeFunctionData(functionFragment: "claimable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositeds",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "detachTokenFromGauge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earnedBribes",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "earnedRewards",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeVault", values?: undefined): string;
  encodeFunctionData(functionFragment: "gauges", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAttachments",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[], string]
  ): string;
  encodeFunctionData(functionFragment: "isAlive", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAttach",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isBribe", values: [string]): string;
  encodeFunctionData(functionFragment: "isGauge", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isGaugeFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGaugeHandler",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isVotablePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "killGauge", values: [string]): string;
  encodeFunctionData(functionFragment: "lastVoted", values: [string]): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrateMinter",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "noahBribe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poke", values: [string]): string;
  encodeFunctionData(
    functionFragment: "poolForBribe",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolForGauge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolVote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolWeights",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "registerGauge",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "reset", values?: undefined): string;
  encodeFunctionData(functionFragment: "reviveGauge", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setEmergencyCouncil",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFeeVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGaugeFactory",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGaugeHandler",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setNoahBribe",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotablePool",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "undistributed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "updateAll", values?: undefined): string;
  encodeFunctionData(functionFragment: "updateFor", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "updateForRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updateGauge", values: [string]): string;
  encodeFunctionData(
    functionFragment: "update_period",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usedWeights", values: [string]): string;
  encodeFunctionData(functionFragment: "userVotes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "weights", values: [string]): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBribe",
    values: [string[], string[][]]
  ): string;

  decodeFunctionResult(functionFragment: "_ve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attachTokenToGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "base", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bribes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimBribes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "detachTokenFromGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedBribes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gauges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAttachments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAlive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAttach", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBribe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGauge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGaugeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGaugeHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVotablePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "killGauge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "noahBribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolForBribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolForGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reviveGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGaugeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGaugeHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNoahBribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotablePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateForRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_period",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weights", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBribe",
    data: BytesLike
  ): Result;

  events: {
    "Attach(address,address)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "Detach(address,address)": EventFragment;
    "DistributeReward(address,address,uint256)": EventFragment;
    "GaugeCreated(address,address,address,address)": EventFragment;
    "GaugeKilled(address)": EventFragment;
    "GaugeRevived(address)": EventFragment;
    "NotifyReward(address,address,uint256)": EventFragment;
    "PoolVoted(address,uint256)": EventFragment;
    "SetGaugeFactory(address,bool)": EventFragment;
    "SetGaugeHandler(address,bool)": EventFragment;
    "SetNoahBribe(address)": EventFragment;
    "SetVotablePool(address,bool)": EventFragment;
    "TotalWeight(uint256)": EventFragment;
    "Voted(address,address,uint256)": EventFragment;
    "Whitelisted(address,address,bool)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Attach"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Detach"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GaugeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GaugeKilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GaugeRevived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NotifyReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGaugeFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGaugeHandler"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNoahBribe"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVotablePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalWeight"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Whitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AttachEvent = TypedEvent<
  [string, string],
  { owner: string; gauge: string }
>;

export type AttachEventFilter = TypedEventFilter<AttachEvent>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  { account: string; gauge: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type DetachEvent = TypedEvent<
  [string, string],
  { owner: string; gauge: string }
>;

export type DetachEventFilter = TypedEventFilter<DetachEvent>;

export type DistributeRewardEvent = TypedEvent<
  [string, string, BigNumber],
  { sender: string; gauge: string; amount: BigNumber }
>;

export type DistributeRewardEventFilter =
  TypedEventFilter<DistributeRewardEvent>;

export type GaugeCreatedEvent = TypedEvent<
  [string, string, string, string],
  { gauge: string; creator: string; bribe: string; pool: string }
>;

export type GaugeCreatedEventFilter = TypedEventFilter<GaugeCreatedEvent>;

export type GaugeKilledEvent = TypedEvent<[string], { gauge: string }>;

export type GaugeKilledEventFilter = TypedEventFilter<GaugeKilledEvent>;

export type GaugeRevivedEvent = TypedEvent<[string], { gauge: string }>;

export type GaugeRevivedEventFilter = TypedEventFilter<GaugeRevivedEvent>;

export type NotifyRewardEvent = TypedEvent<
  [string, string, BigNumber],
  { sender: string; reward: string; amount: BigNumber }
>;

export type NotifyRewardEventFilter = TypedEventFilter<NotifyRewardEvent>;

export type PoolVotedEvent = TypedEvent<
  [string, BigNumber],
  { pool: string; weight: BigNumber }
>;

export type PoolVotedEventFilter = TypedEventFilter<PoolVotedEvent>;

export type SetGaugeFactoryEvent = TypedEvent<
  [string, boolean],
  { gaugeFactory: string; isActive: boolean }
>;

export type SetGaugeFactoryEventFilter = TypedEventFilter<SetGaugeFactoryEvent>;

export type SetGaugeHandlerEvent = TypedEvent<
  [string, boolean],
  { owner: string; isActive: boolean }
>;

export type SetGaugeHandlerEventFilter = TypedEventFilter<SetGaugeHandlerEvent>;

export type SetNoahBribeEvent = TypedEvent<[string], { noahBribe: string }>;

export type SetNoahBribeEventFilter = TypedEventFilter<SetNoahBribeEvent>;

export type SetVotablePoolEvent = TypedEvent<
  [string, boolean],
  { pool: string; isActive: boolean }
>;

export type SetVotablePoolEventFilter = TypedEventFilter<SetVotablePoolEvent>;

export type TotalWeightEvent = TypedEvent<[BigNumber], { weight: BigNumber }>;

export type TotalWeightEventFilter = TypedEventFilter<TotalWeightEvent>;

export type VotedEvent = TypedEvent<
  [string, string, BigNumber],
  { voter: string; pool: string; weight: BigNumber }
>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export type WhitelistedEvent = TypedEvent<
  [string, string, boolean],
  { whitelister: string; token: string; isActive: boolean }
>;

export type WhitelistedEventFilter = TypedEventFilter<WhitelistedEvent>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  { account: string; gauge: string; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Voter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VoterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _ve(overrides?: CallOverrides): Promise<[string]>;

    attachTokenToGauge(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    base(overrides?: CallOverrides): Promise<[string]>;

    bribes(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    claimBribes(
      _bribes: string[],
      _tokens: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      _gauges: string[],
      _tokens: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "depositeds(address,address[])"(
      _account: string,
      _gauges: string[],
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tokens: string[];
        balances: BigNumber[];
        derivedBalances: BigNumber[];
        totalSupply: BigNumber[];
        derivedSupply: BigNumber[];
      }
    >;

    "depositeds(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tokens: string[];
        balances: BigNumber[];
        derivedBalances: BigNumber[];
        totalSupply: BigNumber[];
        derivedSupply: BigNumber[];
      }
    >;

    detachTokenFromGauge(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distribute(address[])"(
      _gauges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distribute(address)"(
      _gauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distribute(uint256,uint256)"(
      start: BigNumberish,
      finish: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distribute()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distributeFees(uint256,uint256)"(
      start: BigNumberish,
      finish: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distributeFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distributeFees(address[])"(
      _bribes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earnedBribes(
      _bribes: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [string[][], BigNumber[][]] & {
        tokens: string[][];
        claimables: BigNumber[][];
      }
    >;

    earnedRewards(
      _gauges: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [string[][], BigNumber[][]] & {
        tokens: string[][];
        claimables: BigNumber[][];
      }
    >;

    emergencyCouncil(overrides?: CallOverrides): Promise<[string]>;

    feeVault(overrides?: CallOverrides): Promise<[string]>;

    gauges(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getAttachments(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { attachments: string[] }>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _tokens: string[],
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAlive(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isAttach(
      _account: string,
      _gauge: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBribe(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGauge(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGaugeFactory(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGaugeHandler(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isVotablePool(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    killGauge(
      _gauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastVoted(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    length(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrateMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    noahBribe(overrides?: CallOverrides): Promise<[string]>;

    notifyRewardAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poke(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolForBribe(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    poolForGauge(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    poolVote(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "poolWeights()"(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _pools: string[]; _votes: BigNumber[] }
    >;

    "poolWeights(address[])"(
      _pools: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _votes: BigNumber[] }>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    registerGauge(
      _creator: string,
      _pool: string,
      _gauge: string,
      _bribe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reset(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reviveGauge(
      _gauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyCouncil(
      _council: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeVault(
      _feeVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGaugeFactory(
      _gaugeFactory: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGaugeHandler(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNoahBribe(
      _bribe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVotablePool(
      _pool: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    undistributed(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFor(
      _gauges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateForRange(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGauge(
      _gauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update_period(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usedWeights(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "userVotes(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _pools: string[]; _votes: BigNumber[] }
    >;

    "userVotes(address,address[])"(
      _account: string,
      _pools: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _votes: BigNumber[] }>;

    vote(
      _poolVote: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weights(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelist(
      _token: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBribe(
      _bribes: string[],
      _tokens: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _ve(overrides?: CallOverrides): Promise<string>;

  attachTokenToGauge(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  base(overrides?: CallOverrides): Promise<string>;

  bribes(arg0: string, overrides?: CallOverrides): Promise<string>;

  claimBribes(
    _bribes: string[],
    _tokens: string[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    _gauges: string[],
    _tokens: string[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "depositeds(address,address[])"(
    _account: string,
    _gauges: string[],
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
      tokens: string[];
      balances: BigNumber[];
      derivedBalances: BigNumber[];
      totalSupply: BigNumber[];
      derivedSupply: BigNumber[];
    }
  >;

  "depositeds(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
      tokens: string[];
      balances: BigNumber[];
      derivedBalances: BigNumber[];
      totalSupply: BigNumber[];
      derivedSupply: BigNumber[];
    }
  >;

  detachTokenFromGauge(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distribute(address[])"(
    _gauges: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distribute(address)"(
    _gauge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distribute(uint256,uint256)"(
    start: BigNumberish,
    finish: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distribute()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distributeFees(uint256,uint256)"(
    start: BigNumberish,
    finish: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distributeFees()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distributeFees(address[])"(
    _bribes: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earnedBribes(
    _bribes: string[],
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [string[][], BigNumber[][]] & {
      tokens: string[][];
      claimables: BigNumber[][];
    }
  >;

  earnedRewards(
    _gauges: string[],
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [string[][], BigNumber[][]] & {
      tokens: string[][];
      claimables: BigNumber[][];
    }
  >;

  emergencyCouncil(overrides?: CallOverrides): Promise<string>;

  feeVault(overrides?: CallOverrides): Promise<string>;

  gauges(arg0: string, overrides?: CallOverrides): Promise<string>;

  getAttachments(
    _account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  gov(overrides?: CallOverrides): Promise<string>;

  initialize(
    _tokens: string[],
    _minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAlive(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isAttach(
    _account: string,
    _gauge: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBribe(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isGauge(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isGaugeFactory(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isGaugeHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isVotablePool(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  killGauge(
    _gauge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastVoted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  length(overrides?: CallOverrides): Promise<BigNumber>;

  migrateMinter(
    _minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minter(overrides?: CallOverrides): Promise<string>;

  noahBribe(overrides?: CallOverrides): Promise<string>;

  notifyRewardAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poke(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolForBribe(arg0: string, overrides?: CallOverrides): Promise<string>;

  poolForGauge(arg0: string, overrides?: CallOverrides): Promise<string>;

  poolVote(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "poolWeights()"(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _pools: string[]; _votes: BigNumber[] }
  >;

  "poolWeights(address[])"(
    _pools: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  registerGauge(
    _creator: string,
    _pool: string,
    _gauge: string,
    _bribe: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reset(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reviveGauge(
    _gauge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyCouncil(
    _council: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeVault(
    _feeVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGaugeFactory(
    _gaugeFactory: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGaugeHandler(
    _account: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNoahBribe(
    _bribe: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVotablePool(
    _pool: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  undistributed(overrides?: CallOverrides): Promise<BigNumber>;

  updateAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFor(
    _gauges: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateForRange(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGauge(
    _gauge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update_period(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usedWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "userVotes(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _pools: string[]; _votes: BigNumber[] }
  >;

  "userVotes(address,address[])"(
    _account: string,
    _pools: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  vote(
    _poolVote: string[],
    _weights: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  whitelist(
    _token: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBribe(
    _bribes: string[],
    _tokens: string[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _ve(overrides?: CallOverrides): Promise<string>;

    attachTokenToGauge(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    base(overrides?: CallOverrides): Promise<string>;

    bribes(arg0: string, overrides?: CallOverrides): Promise<string>;

    claimBribes(
      _bribes: string[],
      _tokens: string[][],
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      _gauges: string[],
      _tokens: string[][],
      overrides?: CallOverrides
    ): Promise<void>;

    claimable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "depositeds(address,address[])"(
      _account: string,
      _gauges: string[],
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tokens: string[];
        balances: BigNumber[];
        derivedBalances: BigNumber[];
        totalSupply: BigNumber[];
        derivedSupply: BigNumber[];
      }
    >;

    "depositeds(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tokens: string[];
        balances: BigNumber[];
        derivedBalances: BigNumber[];
        totalSupply: BigNumber[];
        derivedSupply: BigNumber[];
      }
    >;

    detachTokenFromGauge(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "distribute(address[])"(
      _gauges: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "distribute(address)"(
      _gauge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "distribute(uint256,uint256)"(
      start: BigNumberish,
      finish: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "distribute()"(overrides?: CallOverrides): Promise<void>;

    "distributeFees(uint256,uint256)"(
      start: BigNumberish,
      finish: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "distributeFees()"(overrides?: CallOverrides): Promise<void>;

    "distributeFees(address[])"(
      _bribes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    earnedBribes(
      _bribes: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [string[][], BigNumber[][]] & {
        tokens: string[][];
        claimables: BigNumber[][];
      }
    >;

    earnedRewards(
      _gauges: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [string[][], BigNumber[][]] & {
        tokens: string[][];
        claimables: BigNumber[][];
      }
    >;

    emergencyCouncil(overrides?: CallOverrides): Promise<string>;

    feeVault(overrides?: CallOverrides): Promise<string>;

    gauges(arg0: string, overrides?: CallOverrides): Promise<string>;

    getAttachments(
      _account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    gov(overrides?: CallOverrides): Promise<string>;

    initialize(
      _tokens: string[],
      _minter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAlive(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isAttach(
      _account: string,
      _gauge: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBribe(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isGauge(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isGaugeFactory(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isGaugeHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isVotablePool(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    killGauge(_gauge: string, overrides?: CallOverrides): Promise<void>;

    lastVoted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    migrateMinter(_minter: string, overrides?: CallOverrides): Promise<void>;

    minter(overrides?: CallOverrides): Promise<string>;

    noahBribe(overrides?: CallOverrides): Promise<string>;

    notifyRewardAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    poke(_account: string, overrides?: CallOverrides): Promise<void>;

    poolForBribe(arg0: string, overrides?: CallOverrides): Promise<string>;

    poolForGauge(arg0: string, overrides?: CallOverrides): Promise<string>;

    poolVote(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "poolWeights()"(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _pools: string[]; _votes: BigNumber[] }
    >;

    "poolWeights(address[])"(
      _pools: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    registerGauge(
      _creator: string,
      _pool: string,
      _gauge: string,
      _bribe: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reset(overrides?: CallOverrides): Promise<void>;

    reviveGauge(_gauge: string, overrides?: CallOverrides): Promise<void>;

    setEmergencyCouncil(
      _council: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeVault(_feeVault: string, overrides?: CallOverrides): Promise<void>;

    setGaugeFactory(
      _gaugeFactory: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGaugeHandler(
      _account: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    setNoahBribe(_bribe: string, overrides?: CallOverrides): Promise<void>;

    setVotablePool(
      _pool: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    undistributed(overrides?: CallOverrides): Promise<BigNumber>;

    updateAll(overrides?: CallOverrides): Promise<void>;

    updateFor(_gauges: string[], overrides?: CallOverrides): Promise<void>;

    updateForRange(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGauge(_gauge: string, overrides?: CallOverrides): Promise<void>;

    update_period(overrides?: CallOverrides): Promise<void>;

    usedWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userVotes(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _pools: string[]; _votes: BigNumber[] }
    >;

    "userVotes(address,address[])"(
      _account: string,
      _pools: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    vote(
      _poolVote: string[],
      _weights: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    weights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(
      _token: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBribe(
      _bribes: string[],
      _tokens: string[][],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Attach(address,address)"(
      owner?: string | null,
      gauge?: string | null
    ): AttachEventFilter;
    Attach(owner?: string | null, gauge?: string | null): AttachEventFilter;

    "Deposit(address,address,uint256)"(
      account?: string | null,
      gauge?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      account?: string | null,
      gauge?: string | null,
      amount?: null
    ): DepositEventFilter;

    "Detach(address,address)"(
      owner?: string | null,
      gauge?: string | null
    ): DetachEventFilter;
    Detach(owner?: string | null, gauge?: string | null): DetachEventFilter;

    "DistributeReward(address,address,uint256)"(
      sender?: string | null,
      gauge?: string | null,
      amount?: null
    ): DistributeRewardEventFilter;
    DistributeReward(
      sender?: string | null,
      gauge?: string | null,
      amount?: null
    ): DistributeRewardEventFilter;

    "GaugeCreated(address,address,address,address)"(
      gauge?: string | null,
      creator?: null,
      bribe?: string | null,
      pool?: string | null
    ): GaugeCreatedEventFilter;
    GaugeCreated(
      gauge?: string | null,
      creator?: null,
      bribe?: string | null,
      pool?: string | null
    ): GaugeCreatedEventFilter;

    "GaugeKilled(address)"(gauge?: string | null): GaugeKilledEventFilter;
    GaugeKilled(gauge?: string | null): GaugeKilledEventFilter;

    "GaugeRevived(address)"(gauge?: string | null): GaugeRevivedEventFilter;
    GaugeRevived(gauge?: string | null): GaugeRevivedEventFilter;

    "NotifyReward(address,address,uint256)"(
      sender?: string | null,
      reward?: string | null,
      amount?: null
    ): NotifyRewardEventFilter;
    NotifyReward(
      sender?: string | null,
      reward?: string | null,
      amount?: null
    ): NotifyRewardEventFilter;

    "PoolVoted(address,uint256)"(
      pool?: string | null,
      weight?: null
    ): PoolVotedEventFilter;
    PoolVoted(pool?: string | null, weight?: null): PoolVotedEventFilter;

    "SetGaugeFactory(address,bool)"(
      gaugeFactory?: string | null,
      isActive?: null
    ): SetGaugeFactoryEventFilter;
    SetGaugeFactory(
      gaugeFactory?: string | null,
      isActive?: null
    ): SetGaugeFactoryEventFilter;

    "SetGaugeHandler(address,bool)"(
      owner?: string | null,
      isActive?: null
    ): SetGaugeHandlerEventFilter;
    SetGaugeHandler(
      owner?: string | null,
      isActive?: null
    ): SetGaugeHandlerEventFilter;

    "SetNoahBribe(address)"(noahBribe?: string | null): SetNoahBribeEventFilter;
    SetNoahBribe(noahBribe?: string | null): SetNoahBribeEventFilter;

    "SetVotablePool(address,bool)"(
      pool?: string | null,
      isActive?: null
    ): SetVotablePoolEventFilter;
    SetVotablePool(
      pool?: string | null,
      isActive?: null
    ): SetVotablePoolEventFilter;

    "TotalWeight(uint256)"(weight?: null): TotalWeightEventFilter;
    TotalWeight(weight?: null): TotalWeightEventFilter;

    "Voted(address,address,uint256)"(
      voter?: string | null,
      pool?: string | null,
      weight?: null
    ): VotedEventFilter;
    Voted(
      voter?: string | null,
      pool?: string | null,
      weight?: null
    ): VotedEventFilter;

    "Whitelisted(address,address,bool)"(
      whitelister?: string | null,
      token?: string | null,
      isActive?: null
    ): WhitelistedEventFilter;
    Whitelisted(
      whitelister?: string | null,
      token?: string | null,
      isActive?: null
    ): WhitelistedEventFilter;

    "Withdraw(address,address,uint256)"(
      account?: string | null,
      gauge?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: string | null,
      gauge?: string | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    _ve(overrides?: CallOverrides): Promise<BigNumber>;

    attachTokenToGauge(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<BigNumber>;

    bribes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimBribes(
      _bribes: string[],
      _tokens: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      _gauges: string[],
      _tokens: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "depositeds(address,address[])"(
      _account: string,
      _gauges: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "depositeds(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    detachTokenFromGauge(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distribute(address[])"(
      _gauges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distribute(address)"(
      _gauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distribute(uint256,uint256)"(
      start: BigNumberish,
      finish: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distribute()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distributeFees(uint256,uint256)"(
      start: BigNumberish,
      finish: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distributeFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distributeFees(address[])"(
      _bribes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earnedBribes(
      _bribes: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earnedRewards(
      _gauges: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyCouncil(overrides?: CallOverrides): Promise<BigNumber>;

    feeVault(overrides?: CallOverrides): Promise<BigNumber>;

    gauges(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAttachments(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _tokens: string[],
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAlive(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isAttach(
      _account: string,
      _gauge: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBribe(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGauge(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGaugeFactory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGaugeHandler(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isVotablePool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    killGauge(
      _gauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastVoted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    migrateMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    noahBribe(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poke(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolForBribe(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolForGauge(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolVote(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolWeights()"(overrides?: CallOverrides): Promise<BigNumber>;

    "poolWeights(address[])"(
      _pools: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    registerGauge(
      _creator: string,
      _pool: string,
      _gauge: string,
      _bribe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reset(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reviveGauge(
      _gauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyCouncil(
      _council: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeVault(
      _feeVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGaugeFactory(
      _gaugeFactory: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGaugeHandler(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNoahBribe(
      _bribe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVotablePool(
      _pool: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    undistributed(overrides?: CallOverrides): Promise<BigNumber>;

    updateAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFor(
      _gauges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateForRange(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGauge(
      _gauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update_period(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usedWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userVotes(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userVotes(address,address[])"(
      _account: string,
      _pools: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      _poolVote: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(
      _token: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBribe(
      _bribes: string[],
      _tokens: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _ve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    attachTokenToGauge(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    base(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bribes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimBribes(
      _bribes: string[],
      _tokens: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      _gauges: string[],
      _tokens: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "depositeds(address,address[])"(
      _account: string,
      _gauges: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "depositeds(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    detachTokenFromGauge(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distribute(address[])"(
      _gauges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distribute(address)"(
      _gauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distribute(uint256,uint256)"(
      start: BigNumberish,
      finish: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distribute()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distributeFees(uint256,uint256)"(
      start: BigNumberish,
      finish: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distributeFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distributeFees(address[])"(
      _bribes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earnedBribes(
      _bribes: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earnedRewards(
      _gauges: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyCouncil(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gauges(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAttachments(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _tokens: string[],
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAlive(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAttach(
      _account: string,
      _gauge: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBribe(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGauge(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGaugeFactory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGaugeHandler(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVotablePool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    killGauge(
      _gauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastVoted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    noahBribe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poke(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolForBribe(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolForGauge(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolVote(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolWeights()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolWeights(address[])"(
      _pools: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerGauge(
      _creator: string,
      _pool: string,
      _gauge: string,
      _bribe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reset(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reviveGauge(
      _gauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyCouncil(
      _council: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeVault(
      _feeVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGaugeFactory(
      _gaugeFactory: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGaugeHandler(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNoahBribe(
      _bribe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVotablePool(
      _pool: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    undistributed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFor(
      _gauges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateForRange(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGauge(
      _gauge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update_period(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usedWeights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userVotes(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userVotes(address,address[])"(
      _account: string,
      _pools: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      _poolVote: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      _token: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBribe(
      _bribes: string[],
      _tokens: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
